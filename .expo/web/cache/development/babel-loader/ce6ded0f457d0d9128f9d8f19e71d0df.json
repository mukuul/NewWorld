{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar fetch = require('node-fetch');\n\nvar fetchCivDetails = function fetchCivDetails() {\n  return fetch('https://age-of-empires-2-api.herokuapp.com/api/v1/civilizations').then(function (response) {\n    return response.json();\n  }).then(function (json) {\n    return json.civilizations;\n  }).then(function (civs) {\n    var civ_output_arr = [];\n    var output_arr_resolve;\n    var output_arr_length = civs.length;\n\n    var _loop = function _loop(civilization) {\n      var civ_unit_array = [];\n      var civ_name = civilization.name;\n      var url_unit_array = civilization.unique_unit;\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(url_unit_array), _step2; !(_step2 = _iterator2()).done;) {\n        var url_unit = _step2.value;\n        var response = fetch(url_unit);\n        civ_unit_array.push(response);\n      }\n\n      var unit_detail_array = Promise.all(civ_unit_array).then(function (arr) {\n        return Promise.all(arr.map(function (response) {\n          return response.json();\n        }));\n      }).then(function (arr) {\n        return arr.map(function (unit) {\n          return [unit.name, unit.age];\n        });\n      });\n      unit_detail_array.then(function (unit__arr) {\n        var output_str = civ_name + \" have\";\n\n        if (civ_unit_array.length === 0) {\n          output_str += \" no unique units.\\n\";\n        }\n\n        for (var i = 0; i < unit__arr.length; i++) {\n          var unit = unit__arr[i];\n          var unit_name = unit[0];\n          var unit_desc = unit[1];\n\n          if (i !== 0) {\n            output_str = output_str.substring(0, output_str.length - 2);\n            output_str += \" and \";\n          }\n\n          output_str += \" \" + unit_name + \" in \" + unit_desc + \" age.\\n\";\n        }\n\n        civ_output_arr.push(output_str);\n        output_arr_length--;\n\n        if (output_arr_length === 0) {\n          output_arr_resolve(civ_output_arr);\n        }\n      });\n    };\n\n    for (var _iterator = _createForOfIteratorHelperLoose(civs), _step; !(_step = _iterator()).done;) {\n      var civilization = _step.value;\n\n      _loop(civilization);\n    }\n\n    return new Promise(function (resolve) {\n      output_arr_resolve = resolve;\n    });\n  });\n};\n\nmodule.exports = {\n  fetchCiv: fetchCivDetails\n};","map":{"version":3,"sources":["C:/Users/dell/Desktop/Projects/NewWorld/NewWorld/practice.js"],"names":["fetch","require","fetchCivDetails","then","response","json","civilizations","civs","civ_output_arr","output_arr_resolve","output_arr_length","length","civilization","civ_unit_array","civ_name","name","url_unit_array","unique_unit","url_unit","push","unit_detail_array","Promise","all","arr","map","unit","age","unit__arr","output_str","i","unit_name","unit_desc","substring","resolve","module","exports","fetchCiv"],"mappings":"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","sourcesContent":["const fetch = require('node-fetch')\r\n\r\n\r\nconst fetchCivDetails = () => {\r\n    return fetch('https://age-of-empires-2-api.herokuapp.com/api/v1/civilizations')\r\n        .then((response) => response.json())\r\n        .then((json) => json.civilizations)\r\n        .then((civs) => {\r\n            const civ_output_arr = []   // We store all civilization string outputs in this array\r\n            let output_arr_resolve  // when civilization output array is finalized, we resolve its value\r\n            let output_arr_length = civs.length // We resolve it when all civilizations are resolved and this value reduces to zero\r\n            for (let civilization of civs) {\r\n                let civ_unit_array = [];    // array to store intermediate processed unique tech urls responses in below for loop\r\n                let civ_name = civilization.name; //eg. Aztecs\r\n                let url_unit_array = civilization.unique_unit;\r\n                for (let url_unit of url_unit_array) {\r\n                    let response = fetch(url_unit)\r\n                    civ_unit_array.push(response)\r\n                }\r\n                // eg. tech_detail_array is like promise of [[\"Garland Wars\", \"+4 Infantary Attack\"], [..., ....]]\r\n                // Obtained as a promise after civ_tech_array has been fully processed\r\n                let unit_detail_array = (\r\n                    Promise.all(civ_unit_array)\r\n                        .then((arr) => Promise.all(arr.map((response) => response.json())))\r\n                        .then((arr) => arr.map((unit) => [unit.name, unit.age]))\r\n                )\r\n                // Final formatting for each civilization\r\n                unit_detail_array.then((unit__arr) => {\r\n                    let output_str = `${civ_name} have`\r\n                    if (civ_unit_array.length === 0) {               // Not sure why writing unit__arr.length === 0 gives wrong output\r\n                        output_str += \" no unique units.\\n\";\r\n                    }\r\n                    for (let i = 0; i < unit__arr.length; i++) {\r\n                        let unit = unit__arr[i]\r\n                        let unit_name = unit[0];    // \"Garland Wars\"\r\n                        let unit_desc = unit[1];    // \"+4 Infantary attack\"\r\n                        if (i !== 0) {\r\n                            output_str = output_str.substring(0, output_str.length - 2);\r\n                            output_str += \" and \"\r\n                        }\r\n                        output_str += ` ${unit_name} in ${unit_desc} age.\\n`\r\n                    }\r\n                    civ_output_arr.push(output_str)\r\n                    output_arr_length--\r\n                    if (output_arr_length === 0) { output_arr_resolve(civ_output_arr) }    // All civilizations have been processed\r\n                })\r\n            }\r\n            return new Promise((resolve) => { output_arr_resolve = resolve })\r\n        })\r\n}\r\n\r\nmodule.exports = {\r\n    fetchCiv: fetchCivDetails,\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script"}