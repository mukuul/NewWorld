{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\Projects\\\\NewWorld\\\\NewWorld\\\\App.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { ScrollView } from 'react-native-gesture-handler';\n\nvar _require = require(\"./practice\"),\n    fetchCiv = _require.fetchCiv;\n\nvar App = function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setLoading = _useState4[1];\n\n  useEffect(function () {\n    fetchCiv().then(setData).catch(function (error) {\n      return console.error(error);\n    }).finally(function () {\n      return setLoading(false);\n    });\n  }, []);\n  return React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      padding: 24,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, isLoading ? React.createElement(ActivityIndicator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 22\n    }\n  }) : React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, \" \", data.map(function (elem) {\n    return React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 38\n      }\n    }, elem);\n  }), \" \")));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/dell/Desktop/Projects/NewWorld/NewWorld/App.js"],"names":["React","useState","useEffect","ScrollView","require","fetchCiv","App","data","setData","isLoading","setLoading","then","catch","error","console","finally","flex","padding","alignItems","justifyContent","map","elem"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAEA,SAASC,UAAT,QAA2B,8BAA3B;;eACqBC,OAAO,c;IAApBC,Q,YAAAA,Q;;AAGR,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA,kBACQL,QAAQ,CAAC,EAAD,CADhB;AAAA;AAAA,MACTM,IADS;AAAA,MACHC,OADG;;AAAA,mBAEgBP,QAAQ,CAAC,IAAD,CAFxB;AAAA;AAAA,MAETQ,SAFS;AAAA,MAEEC,UAFF;;AAIhBR,EAAAA,SAAS,CAAC,YAAM;AACdG,IAAAA,QAAQ,GACLM,IADH,CACQH,OADR,EAEGI,KAFH,CAES,UAACC,KAAD;AAAA,aAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,KAFT,EAGGE,OAHH,CAGW;AAAA,aAAML,UAAU,CAAC,KAAD,CAAhB;AAAA,KAHX;AAID,GALQ,EAKN,EALM,CAAT;AAOA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEM,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,OAAO,EAAE,EAApB;AAAwBC,MAAAA,UAAU,EAAE,QAApC;AAA8CC,MAAAA,cAAc,EAAE;AAA9D,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,SAAS,GAAG,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACR,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAQF,IAAI,CAACa,GAAL,CAAS,UAACC,IAAD;AAAA,WAAU,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOA,IAAP,CAAV;AAAA,GAAT,CAAR,MAFJ,CADF,CADF;AASD,CApBD;;AAsBA,eAAef,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, View, ActivityIndicator } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nconst { fetchCiv } = require('./practice')\n\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchCiv()\n      .then(setData)\n      .catch((error) => console.error(error))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <ScrollView>\n      <View style={{ flex: 1, padding: 24, alignItems: \"center\", justifyContent: \"center\" }}>\n        {isLoading ? <ActivityIndicator /> : (\n          <Text> {data.map((elem) => <Text>{elem}</Text>)} </Text>\n        )}\n      </View>\n    </ScrollView>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}